name: "Update package"

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Lexicon package namespace"
        type: string
        required: true
      commit:
        description: "Repository commit to build"
        type: string
        default: "main"

env:
  REGISTRY: ghcr.io

jobs:
  update:
    name: "Update package ${{ inputs.package }}"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout registry
        uses: actions/checkout@v4

      - id: source
        name: Find source for ${{ inputs.package }}
        uses: silverlyra/script-action@v0.2
        with:
          input: ${{ toJson(inputs.package) }}
          script: |
            const filename = path.join(input.replaceAll('.', path.sep), 'lexicon.json');

            const manifest = JSON.parse(await fs.readFile(filename, 'utf-8'));
            const { source: { repository } } = manifest;

            if (!repository || repository.type !== 'git' || typeof repository.url !== 'string')
              throw new Error(`Invalid repository for ${manifest.package.id}`);

            const url = new URL(repository.url);
            if (url.origin !== 'https://github.com')
              throw new Error(`Non-GitHub repository for ${manifest.package.id}`);

            const [owner, repo] = url.pathname.replace(/^\//, '').replace(/\.git$/, '').split('/', 2);

            const checkout = [`LICENSE*`];
            if (repository.path) checkout.push(repository.path);

            return {
              name: `lexicon-${manifest.package.name}`,
              repository: `${owner}/${repo}`,
              path: repository.path ?? '',
              checkout: repository.path ? checkout.join('\n') : '',
            }

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          path: source
          repository: ${{ fromJson(steps.source.outputs.result).repository }}
          ref: ${{ inputs.commit }}
          sparse-checkout: ${{ fromJson(steps.source.outputs.result).checkout }}
          sparse-checkout-cone-mode: false

      - name: Relocate additional files
        run: |
          cp "../$(tr . / <<< "$PACKAGE")/lexicon.json" "$DESTINATION"
          mv LICENSE* "$DESTINATION" || true
        working-directory: source
        env:
          PACKAGE: ${{ inputs.package }}
          DESTINATION: ${{ fromJson(steps.source.outputs.result).path }}
        if: fromJson(steps.source.outputs.result).path != ''

      - name: Show source contents
        run: |
          ls -lR
        working-directory: source

      - id: dockerfile
        name: Create dockerfile
        uses: silverlyra/script-action@v0.2
        with:
          input: ${{ steps.source.outputs.result }}
          script: |
            const lines = [
              `FROM scratch`,
              `ADD . .`,
            ];

            const filename = path.join('source', 'Dockerfile');

            await fs.writeFile(filename, lines.join('\n') + '\n', 'utf-8');

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: source
          push: "true"
          tags: |-
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ fromJson(steps.source.outputs.result).name }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ fromJson(steps.source.outputs.result).name }}:sha-${{ inputs.commit }}
